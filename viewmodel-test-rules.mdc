# ViewModelテスト実装ルール

## 1. 基本方針

**最重要**: ビルドエラーが発生しないことを最優先とする。

## 2. テストコード生成時の必須チェック

### 2.1 ビルドチェックの実行
テストコード生成後、必ず以下を実行：
```bash
./gradlew test
```

### 2.2 エラー発生時の対応
- ビルドエラーが発生した場合、即座に修正
- 修正後、再度ビルドを実行
- エラーが0件になるまで繰り返し修正

## 3. 推奨するテスト実装

### 3.1 シンプルなテスト構造
```kotlin
class ViewModelTest {
    private lateinit var viewModel: ViewModel

    @Before
    fun setUp() {
        viewModel = ViewModel()
    }

    @Test
    fun `テストケース名`() {
        // テスト実装
    }
}
```

### 3.2 使用するインポート
```kotlin
import org.junit.Assert.*
import org.junit.Before
import org.junit.Test
```

### 3.3 避けるべき実装
- MainDispatcherRuleの使用
- 複雑なコルーチンテスト
- 存在しないメソッドの呼び出し
- 時間制御テスト（advanceTimeBy等）
- 複雑な非同期処理テスト

## 4. プロパティ名の確認

### 4.1 必須確認事項
テストコード作成前に、必ずViewModelの実際のプロパティ名を確認する。

### 4.2 確認方法
```kotlin
// ViewModelのソースコードを確認
// 実際のプロパティ名を使用
viewModel.actualPropertyName.value
```

## 5. テストケースの優先順位

1. **最優先**: ビルドエラーが発生しないこと
2. **次優先**: 基本的な状態確認テスト
3. **最後**: 複雑な状態遷移テスト（必要に応じて）

## 6. エラー回避のチェックリスト

- [ ] MainDispatcherRuleを使用していない
- [ ] 複雑なコルーチンテストを使用していない
- [ ] 実際のプロパティ名を使用している
- [ ] 存在するメソッドのみを呼び出している
- [ ] 基本的なJUnitテストのみを使用している
- [ ] ビルドエラーが0件である

## 7. テスト実装の手順

1. ViewModelのソースコードを確認
2. 実際のプロパティ名とメソッド名を把握
3. シンプルなテストケースを作成
4. ビルドを実行してエラーを確認
5. エラーがあれば修正
6. エラーが0件になるまで繰り返し

## 8. 品質保証

- **ビルドエラー0件**: テストコード生成完了時点でビルドエラーは0件であること
- **テスト実行可能**: 生成されたテストコードが正常に実行可能であること
- **依存関係完備**: 必要なライブラリがすべて正しく設定されていること

## 9. 重要な注意事項

- 複雑なテストよりも、シンプルで動作するテストを優先
- ビルドエラーが発生した場合は、mdcファイルのルールよりも実際の動作を優先
- テストコードの完成度よりも、ビルドエラーの解消を最優先とする